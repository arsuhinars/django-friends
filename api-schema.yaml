openapi: 3.0.3


info:
  title: Django Friends
  version: "1.0"


servers:
  - url: http://localhost:8000


tags:
  - name: User
  - name: Friends


paths:
  /registration:
    post:
      tags: [ User ]
      summary: Регистрация пользователя
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              title: UserCreateSchema
              type: object
              properties:
                name: { type: string }
                password: { type: string }
      responses:
        201:
          description: Операция успешно выполненна
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        400:
          description: Пользователь с данным именем уже существует

  /user/{user_id}:
    get:
      tags: [ User ]
      summary: Получить пользователя
      operationId: getUserById
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        200:
          description: Операция успешно выполненна
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user" }
        404:
          description: Пользователь с данным `user_id` не найден

  /users/search:
    get:
      tags: [ User ]
      summary: Поиск пользователей
      operationId: searchUsers
      parameters:
        - name: name
          in: query
          required: true
          schema: { type: string }
        - name: limit
          in: query
          required: false
          schema: { type: integer, default: 10 }
      responses:
        200:
          description: Операция успешно выполненна
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user" }

  /friend/{user_id}:
    get:
      tags: [ Friends ]
      summary: Проверить статус с пользователем
      operationId: getFriendStatus
      parameters:
        - $ref: "#/components/parameters/user_id"
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { $ref: "#/components/schemas/friendship_status" }
        404:
          description: Пользователь с данным `user_id` не найден
    delete:
      tags: [ Friends ]
      summary: Удалить пользователя из друзей
      operationId: removeFriend
      parameters:
        - $ref: "#/components/parameters/user_id"
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
        400:
          description: Данный пользователь не находится в списке друзей
        404:
          description: Пользователь с данным `user_id` не найден

  /friend/{user_id}/invite:
    post:
      tags: [ Friends ]
      summary: Пригласить пользователя в друзья
      operationId: inviteFriend
      parameters:
        - $ref: "#/components/parameters/user_id"
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
        400:
          description: |
            * Попытка отправить заявку самому себе
            * Заявка данному пользователю уже была отправленна
            * Пользователь уже находится в списке друзей
        404:
          description: Пользователя с данным `user_id` не существует
  
  /friend/{user_id}/accept:
    post:
      tags: [ Friends ]
      summary: Принять приглашение на добавление в друзья
      operationId: acceptInvite
      parameters:
        - $ref: "#/components/parameters/user_id"
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
        400:
          description: Данный пользователь не отправлял заявки
        404:
          description: Пользователя с данным `user_id` не существует

  /friend/{user_id}/decline:
    post:
      tags: [ Friends ]
      summary: Отклонить приглашение на добавление в друзья
      operationId: declineInvite
      parameters:
        - $ref: "#/components/parameters/user_id"
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
        400:
          description: Данный пользователь не отправлял заявки
        404:
          description: Пользователя с данным `user_id` не существует
  
  /friends:
    get:
      tags: [ Friends ]
      summary: Получить список друзей
      operationId: getFriends
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненная
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user" }
  
  /friends/incoming:
    get:
      tags: [ Friends ]
      summary: Получить список полученных заявок на приглашение в друзья
      operationId: getIncomingInvites
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user" }

  /friends/outcoming:
    get:
      tags: [ Friends ]
      summary: Получить список отправленных заявок на приглашение в друзья
      operationId: getOutcomingInvites
      security:
        - basic: []
      responses:
        200:
          description: Операция успешно выполненна
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user" }


components:
  schemas:
    user:
      title: UserSchema
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
    friendship_status:
      title: FriendshipStatus
      type: string
      enum: [ NONE, INCOMING_INVITE, OUTCOMING_INVITE, FRIEND ]
  parameters:
    user_id:
      name: user_id
      in: path
      description: Идентификатор пользователя
      required: true
      schema: { type: integer }
  securitySchemes:
    basic:
      type: http
      scheme: basic
